工厂模式：用于生产对象
优点：对于某些复杂的对象。使用者无需关注其产生的过程，将生产过程包装在工厂中，生产者与使用者职责分明

1、简单工厂模式
工厂类；提供生产对象的方法（行为），如何使用少量代码实现不同类型对象的产生
解决方案：将所有类型对象实现相同接口即可
缺点：如果需要新增功能，需要修改源代码，可能会造成本来的功能崩溃，违反开闭原则
基于以上缺点，提供两种解决方案
2、基于反射机制的简单工厂模式
在工厂类的生产方法中，接收一个类的全称，根据全称来获取该类的所有信息，存入Class类型的c对象中，使用c创建对象即可


3、工厂方法模式：将工厂类分割，每个类型对象均提供一个工厂类，这样的画，不管是出现问题还是功能的增加
都比原来的单个工厂要好。对工厂类进行抽象，成了抽象工厂类
优点：在具体有简单工厂模式的优点的前提下，避免了它的缺点，如果某个工厂类出现问题，不会影响其他工厂；如果哟啊新增功能，
也不需要修改之前的代码
缺点：代码量巨大，每增加一个功能，均需要两个类，(对象类以及工厂)才行，如果生产的对象有族群关系，该方式不能区分族群
例如：苹果手机有很多型号(iphoneX、iphone8...),有许多版本，如果需要大陆版的，很难实现

4、抽象工厂模式（终极，软考）
有族群关系的对象类型，将它们的产生方法抽象出来放入抽象工厂类中

